package DAO;

import entity.OrderDetail;
import entity.Orders;
import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * OrderDAO - L·ªõp truy xu·∫•t d·ªØ li·ªáu cho b·∫£ng "orders" v√† "order_detail".
 *
 * ‚úÖ Ch·ª©c nƒÉng ch√≠nh:
 *  - L·∫•y danh s√°ch ƒë∆°n h√†ng v√† chi ti·∫øt ƒë∆°n h√†ng
 *  - Th√™m m·ªõi ƒë∆°n h√†ng (insert order + details)
 *  - C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
 *  - L·∫•y ID ƒë∆°n m·ªõi nh·∫•t c·ªßa kh√°ch h√†ng
 *
 * üî• Quy ∆∞·ªõc:
 *  - B·∫£ng orders.order_id l√† AUTO_INCREMENT
 *  - B·∫£ng order_detail l∆∞u chi ti·∫øt g·ªìm (order_id, product_id, size_name, quantity)
 *  - C·ªôt total (int) l∆∞u t·ªïng ti·ªÅn c·ªßa ƒë∆°n (ƒë√£ bao g·ªìm khuy·∫øn m√£i)
 *  - C·ªôt staff_id c√≥ th·ªÉ null n·∫øu ƒë∆°n ch∆∞a ƒë∆∞·ª£c nh√¢n vi√™n x√°c nh·∫≠n
 *
 * @author 
 */
public class OrderDAO extends DBConnect.DBConnect {

    // =========================================================
    // ===============        SELECT QUERY       ===============
    // =========================================================

    /**
     * L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng trong h·ªá th·ªëng (kh√¥ng s·∫Øp x·∫øp).
     */
    public List<Orders> getAllOrders() {
        List<Orders> list = new ArrayList<>();
        String sql = "SELECT order_id, address, date, status, phone_number, customer_id, staff_id, total FROM orders";
        try (PreparedStatement st = connection.prepareStatement(sql);
             ResultSet rs = st.executeQuery()) {
            while (rs.next()) {
                list.add(new Orders(
                        rs.getInt("order_id"),
                        rs.getString("address"),
                        rs.getDate("date"),
                        rs.getString("status"),
                        rs.getString("phone_number"),
                        rs.getInt("customer_id"),
                        rs.getInt("staff_id"),
                        rs.getInt("total")
                ));
            }
        } catch (SQLException e) {
            System.err.println("OrderDAO.getAllOrders: " + e.getMessage());
        }
        return list;
    }

    /**
     * L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c√≥ s·∫Øp x·∫øp theo tr·∫°ng th√°i ∆∞u ti√™n:
     * Pending ‚Üí Delivering ‚Üí Delivered ‚Üí Cancelled ‚Üí (kh√°c)
     * Sau ƒë√≥ s·∫Øp x·∫øp ti·∫øp theo ng√†y v√† order_id gi·∫£m d·∫ßn.
     */
    public List<Orders> getAllOrdersSort() {
        List<Orders> list = new ArrayList<>();
        String sql =
            "SELECT order_id, address, date, status, phone_number, customer_id, staff_id, total " +
            "FROM orders " +
            "ORDER BY CASE " +
            "  WHEN status = 'Pending' THEN 1 " +
            "  WHEN status = 'Delivering' THEN 2 " +
            "  WHEN status = 'Delivered' THEN 3 " +
            "  WHEN status = 'Cancelled' THEN 4 " +
            "  ELSE 5 END, date DESC, order_id DESC";
        try (PreparedStatement st = connection.prepareStatement(sql);
             ResultSet rs = st.executeQuery()) {
            while (rs.next()) {
                list.add(new Orders(
                        rs.getInt("order_id"),
                        rs.getString("address"),
                        rs.getDate("date"),
                        rs.getString("status"),
                        rs.getString("phone_number"),
                        rs.getInt("customer_id"),
                        rs.getInt("staff_id"),
                        rs.getInt("total")
                ));
            }
        } catch (SQLException e) {
            System.err.println("OrderDAO.getAllOrdersSort: " + e.getMessage());
        }
        return list;
    }

    /**
     * L·∫•y to√†n b·ªô chi ti·∫øt c·ªßa t·∫•t c·∫£ ƒë∆°n h√†ng.
     */
    public List<OrderDetail> getAllOrdersDetail() {
        List<OrderDetail> list = new ArrayList<>();
        String sql = "SELECT order_id, product_id, size_name, quantity FROM order_detail";
        try (PreparedStatement st = connection.prepareStatement(sql);
             ResultSet rs = st.executeQuery()) {
            while (rs.next()) {
                list.add(new OrderDetail(
                        rs.getInt("quantity"),
                        rs.getString("size_name"),
                        rs.getInt("product_id"),
                        rs.getInt("order_id")
                ));
            }
        } catch (SQLException e) {
            System.err.println("OrderDAO.getAllOrdersDetail: " + e.getMessage());
        }
        return list;
    }

    /**
     * L·∫•y danh s√°ch chi ti·∫øt ƒë∆°n h√†ng theo ID ƒë∆°n h√†ng.
     *
     * @param order_id M√£ ƒë∆°n h√†ng
     * @return List<OrderDetail> danh s√°ch chi ti·∫øt
     */
    public List<OrderDetail> getAllOrdersDetailByID(int order_id) {
        List<OrderDetail> list = new ArrayList<>();
        String sql = "SELECT order_id, product_id, size_name, quantity FROM order_detail WHERE order_id = ?";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, order_id);
            try (ResultSet rs = st.executeQuery()) {
                while (rs.next()) {
                    list.add(new OrderDetail(
                            rs.getInt("quantity"),
                            rs.getString("size_name"),
                            rs.getInt("product_id"),
                            rs.getInt("order_id")
                    ));
                }
            }
        } catch (SQLException e) {
            System.err.println("OrderDAO.getAllOrdersDetailByID: " + e.getMessage());
        }
        return list;
    }

    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa 1 kh√°ch h√†ng c·ª• th·ªÉ, s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc.
     *
     * @param customer_id ID kh√°ch h√†ng
     */
    public List<Orders> orderUser(int customer_id) {
        List<Orders> list = new ArrayList<>();
        String sql = "SELECT order_id, address, date, status, phone_number, customer_id, staff_id, total " +
                     "FROM orders WHERE customer_id = ? ORDER BY date DESC, order_id DESC";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, customer_id);
            try (ResultSet rs = st.executeQuery()) {
                while (rs.next()) {
                    list.add(new Orders(
                            rs.getInt("order_id"),
                            rs.getString("address"),
                            rs.getDate("date"),
                            rs.getString("status"),
                            rs.getString("phone_number"),
                            rs.getInt("customer_id"),
                            rs.getInt("staff_id"),
                            rs.getInt("total")
                    ));
                }
            }
        } catch (SQLException e) {
            System.err.println("OrderDAO.orderUser: " + e.getMessage());
        }
        return list;
    }

    // =========================================================
    // ===============         INSERT          ===============
    // =========================================================

    /**
     * Th√™m m·ªõi m·ªôt ƒë∆°n h√†ng v√†o b·∫£ng orders.
     * 
     * @param address      ƒë·ªãa ch·ªâ giao h√†ng
     * @param date         ng√†y ƒë·∫∑t
     * @param status       tr·∫°ng th√°i ban ƒë·∫ßu (Pending,...)
     * @param phoneNumber  s·ªë ƒëi·ªán tho·∫°i nh·∫≠n h√†ng
     * @param customer_id  ID kh√°ch h√†ng
     * @param staffId      ID nh√¢n vi√™n (c√≥ th·ªÉ null n·∫øu ch∆∞a x·ª≠ l√Ω)
     * @param total        t·ªïng ti·ªÅn ƒë∆°n (VND)
     * @return order_id v·ª´a ƒë∆∞·ª£c t·∫°o (0 n·∫øu l·ªói)
     */
    public int insertOrder(String address, Date date, String status, String phoneNumber,
                           int customer_id, Integer staffId, int total) {
        String sql = "INSERT INTO orders(address, date, status, phone_number, customer_id, staff_id, total) VALUES(?,?,?,?,?,?,?)";
        try (PreparedStatement st = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            st.setString(1, address);
            st.setDate(2, new java.sql.Date(date.getTime()));
            st.setString(3, status);
            st.setString(4, (phoneNumber == null ? "" : phoneNumber));
            st.setInt(5, customer_id);
            if (staffId == null || staffId <= 0) {
                st.setNull(6, java.sql.Types.INTEGER);  // staff_id null
            } else {
                st.setInt(6, staffId);
            }
            st.setInt(7, total);
            st.executeUpdate();

            // L·∫•y order_id v·ª´a sinh (n·∫øu DB h·ªó tr·ª£)
            try (ResultSet keys = st.getGeneratedKeys()) {
                if (keys.next()) return keys.getInt(1);
            }

            // fallback: l·∫•y ƒë∆°n m·ªõi nh·∫•t c·ªßa customer
            return getLatestOrderIdByCustomer(customer_id);

        } catch (SQLException e) {
            System.err.println("OrderDAO.insertOrder: " + e.getMessage());
            return 0;
        }
    }

    /**
     * Th√™m chi ti·∫øt ƒë∆°n h√†ng (order_detail).
     * 
     * @param quantity   s·ªë l∆∞·ª£ng
     * @param size_name  size s·∫£n ph·∫©m
     * @param productID  ID s·∫£n ph·∫©m
     * @param orderID    ID ƒë∆°n h√†ng
     */
    public void insertOrderDetail(int quantity, String size_name, int productID, int orderID) {
        String sql = "INSERT INTO order_detail(order_id, product_id, size_name, quantity) VALUES(?,?,?,?)";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, orderID);
            st.setInt(2, productID);
            st.setString(3, size_name);
            st.setInt(4, quantity);
            st.executeUpdate();
        } catch (SQLException e) {
            System.err.println("OrderDAO.insertOrderDetail: " + e.getMessage());
        }
    }

    /**
     * Giao d·ªãch (transaction) t·∫°o ƒë∆°n h√†ng + th√™m chi ti·∫øt ƒë∆°n h√†ng.
     * N·∫øu c√≥ l·ªói, rollback to√†n b·ªô.
     *
     * @return order_id t·∫°o th√†nh c√¥ng, ho·∫∑c 0 n·∫øu rollback.
     */
    public int insertOrderWithDetails(String address, Date date, String status, String phoneNumber,
                                      int customer_id, int staff_id, int total,
                                      List<OrderDetail> details) {
        boolean oldAutoCommit = true;
        try {
            oldAutoCommit = connection.getAutoCommit();
            connection.setAutoCommit(false); // b·∫Øt ƒë·∫ßu transaction

            int orderId = insertOrder(address, date, status, phoneNumber, customer_id, staff_id, total);
            if (orderId <= 0) {
                connection.rollback();
                connection.setAutoCommit(oldAutoCommit);
                return 0;
            }

            if (details != null) {
                for (OrderDetail d : details) {
                    insertOrderDetail(d.getQuantity(), d.getSize_name(), d.getProductID(), orderId);
                }
            }

            connection.commit(); // x√°c nh·∫≠n giao d·ªãch
            connection.setAutoCommit(oldAutoCommit);
            return orderId;

        } catch (SQLException ex) {
            try { connection.rollback(); } catch (SQLException ignore) {}
            System.err.println("OrderDAO.insertOrderWithDetails: " + ex.getMessage());
            try { connection.setAutoCommit(oldAutoCommit); } catch (SQLException ignore) {}
            return 0;
        }
    }

    // =========================================================
    // ===============          UTILS          ===============
    // =========================================================

    /**
     * L·∫•y ID ƒë∆°n m·ªõi nh·∫•t c·ªßa 1 kh√°ch h√†ng (theo order_id DESC).
     */
    public int getLatestOrderIdByCustomer(int customer_id) {
        String sql = "SELECT order_id FROM orders WHERE customer_id = ? ORDER BY order_id DESC LIMIT 1";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, customer_id);
            try (ResultSet rs = st.executeQuery()) {
                if (rs.next()) return rs.getInt("order_id");
            }
        } catch (SQLException e) {
            System.err.println("OrderDAO.getLatestOrderIdByCustomer: " + e.getMessage());
        }
        return 0;
    }

    /**
     * (Deprecated) L·∫•y order_id l·ªõn nh·∫•t to√†n b·∫£ng. Ch·ªâ gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch c≈©.
     */
    @Deprecated
    public int getOrderId() {
        String sql = "SELECT order_id FROM orders ORDER BY order_id DESC LIMIT 1";
        try (PreparedStatement st = connection.prepareStatement(sql);
             ResultSet rs = st.executeQuery()) {
            if (rs.next()) return rs.getInt("order_id");
        } catch (SQLException e) {
            System.err.println("OrderDAO.getOrderId (deprecated): " + e.getMessage());
        }
        return 0;
    }

    // =========================================================
    // ===============          UPDATE          ===============
    // =========================================================

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (Pending ‚Üí Delivering ‚Üí Delivered ‚Üí Cancelled...).
     */
    public void updateStatus(String status, int order_id) {
        String sql = "UPDATE orders SET status = ? WHERE order_id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, status);
            ps.setInt(2, order_id);
            ps.executeUpdate();
        } catch (SQLException e) {
            System.err.println("OrderDAO.updateStatus: " + e.getMessage());
        }
    }
}
