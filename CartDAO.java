package DAO;

import entity.Cart;
import entity.Product;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * CartDAO - L·ªõp truy xu·∫•t d·ªØ li·ªáu (Data Access Object) cho b·∫£ng "cart"
 * 
 * ‚úÖ Ch·ª©c nƒÉng ch√≠nh:
 *  - L·∫•y / th√™m / c·∫≠p nh·∫≠t / x√≥a item trong gi·ªè h√†ng
 *  - T√≠nh t·ªïng ti·ªÅn, ƒë·∫øm s·ªë l∆∞·ª£ng item
 *  - H·ªó tr·ª£ ki·ªÉm tra ƒë∆°n gi√°, s·∫£n ph·∫©m
 * 
 * üî• Quy ∆∞·ªõc trong h·ªá th·ªëng:
 *  - C·ªôt `price` trong b·∫£ng `cart` lu√¥n l∆∞u **ƒê∆†N GI√Å**, kh√¥ng ph·∫£i th√†nh ti·ªÅn.
 *  - Th√†nh ti·ªÅn ch·ªâ ƒë∆∞·ª£c t√≠nh t·∫°m th·ªùi trong controller ho·∫∑c JSP: `price * quantity`
 * 
 * @author duyent
 */
public class CartDAO extends DBConnect.DBConnect {

    /** 
     * L·∫•y to√†n b·ªô s·∫£n ph·∫©m trong gi·ªè h√†ng theo ID kh√°ch h√†ng
     * @param customer_id ID kh√°ch h√†ng
     * @return Danh s√°ch Cart
     */
    public List<Cart> getAll(int customer_id) {
        List<Cart> list = new ArrayList<>();
        String sql = "SELECT * FROM cart WHERE customer_id = ?";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, customer_id);
            try (ResultSet rs = st.executeQuery()) {
                while (rs.next()) {
                    Cart c = new Cart(
                            rs.getInt("cart_id"),
                            rs.getInt("customer_id"),
                            rs.getInt("product_id"),
                            rs.getInt("quantity"),
                            rs.getFloat("price"), // ƒê∆°n gi√° (LU√îN)
                            rs.getString("size_name")
                    );
                    list.add(c);
                }
            }
        } catch (SQLException e) {
            System.err.println("CartDAO.getAll: " + e.getMessage());
        }
        return list;
    }

    /** 
     * Th√™m m·ªôt s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng
     * @param quantity s·ªë l∆∞·ª£ng
     * @param price ƒë∆°n gi√° (ƒë√£ √°p d·ª•ng khuy·∫øn m√£i n·∫øu c√≥)
     * @param customer_id ID kh√°ch h√†ng
     * @param product_id ID s·∫£n ph·∫©m
     * @param size_name size c·ªßa s·∫£n ph·∫©m
     */
    public void insertCart(int quantity, float price, int customer_id, int product_id, String size_name) {
        String sql = "INSERT INTO cart(quantity, price, customer_id, product_id, size_name) VALUES(?,?,?,?,?)";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, quantity);
            st.setFloat(2, price);
            st.setInt(3, customer_id);
            st.setInt(4, product_id);
            st.setString(5, size_name);
            st.executeUpdate();
        } catch (SQLException e) {
            System.err.println("CartDAO.insertCart: " + e.getMessage());
        }
    }

    /**
     * C·∫≠p nh·∫≠t l·∫°i m·ªôt item trong gi·ªè h√†ng (c·∫£ s·ªë l∆∞·ª£ng v√† ƒë∆°n gi√°)
     * 
     * ‚ö† Khi c√≥ thay ƒë·ªïi khuy·∫øn m√£i ho·∫∑c ng∆∞·ªùi d√πng th√™m tr√πng s·∫£n ph·∫©m
     */
    public void updateCart(int customer_id, int product_id, int quantity, float price, String size_name) {
        String sql = "UPDATE cart SET quantity = ?, price = ? WHERE customer_id = ? AND product_id = ? AND size_name = ?";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, quantity);
            st.setFloat(2, price);
            st.setInt(3, customer_id);
            st.setInt(4, product_id);
            st.setString(5, size_name);
            st.executeUpdate();
        } catch (SQLException e) {
            System.err.println("CartDAO.updateCart: " + e.getMessage());
        }
    }

    /**
     * Ch·ªâ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng (kh√¥ng thay ƒë·ªïi ƒë∆°n gi√°)
     * 
     * D√πng cho c√°c thao t√°c tƒÉng/gi·∫£m b·∫±ng AJAX trong cart.jsp
     */
    public void updateQuantityOnly(int customer_id, int product_id, String size_name, int quantity) {
        String sql = "UPDATE cart SET quantity = ? WHERE customer_id = ? AND product_id = ? AND size_name = ?";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, quantity);
            st.setInt(2, customer_id);
            st.setInt(3, product_id);
            st.setString(4, size_name);
            st.executeUpdate();
        } catch (SQLException e) {
            System.err.println("CartDAO.updateQuantityOnly: " + e.getMessage());
        }
    }

    /**
     * X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè (kh√¥ng x√©t size)
     * ‚Üí ch·ªâ d√πng khi s·∫£n ph·∫©m kh√¥ng c√≥ size
     */
    public void deleteCart(int product_id, int customer_id) {
        String sql = "DELETE FROM cart WHERE product_id = ? AND customer_id = ?";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, product_id);
            st.setInt(2, customer_id);
            st.executeUpdate();
        } catch (SQLException e) {
            System.err.println("CartDAO.deleteCart: " + e.getMessage());
        }
    }

    /**
     * X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè d·ª±a tr√™n (product_id + size_name)
     * 
     * @return true n·∫øu x√≥a th√†nh c√¥ng
     */
    public boolean deleteCartBySize(int product_id, int customer_id, String size_name) {
        String sql = "DELETE FROM cart WHERE product_id = ? AND customer_id = ? AND size_name = ?";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, product_id);
            st.setInt(2, customer_id);
            st.setString(3, size_name);
            return st.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("CartDAO.deleteCartBySize: " + e.getMessage());
            return false;
        }
    }

    /**
     * X√≥a to√†n b·ªô gi·ªè h√†ng c·ªßa kh√°ch h√†ng (khi ƒë·∫∑t h√†ng th√†nh c√¥ng)
     */
    public void deleteAllCart(int customer_id) {
        String sql = "DELETE FROM cart WHERE customer_id = ?";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, customer_id);
            st.executeUpdate();
        } catch (SQLException e) {
            System.err.println("CartDAO.deleteAllCart: " + e.getMessage());
        }
    }

    /**
     * L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ b·∫£ng product (ph·ª•c v·ª• khi c·∫ßn t√≠nh l·∫°i gi√°)
     */
    public Product getProductById(int product_id) {
        String sql = "SELECT * FROM product WHERE product_id = ?";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, product_id);
            try (ResultSet rs = st.executeQuery()) {
                if (rs.next()) {
                    return new Product(
                            rs.getInt("product_id"),
                            rs.getInt("quantity"),
                            rs.getInt("price"),
                            rs.getInt("category_id"),
                            rs.getInt("promo_id"),
                            rs.getString("name"),
                            rs.getString("description"),
                            rs.getString("pic_url")
                    );
                }
            }
        } catch (SQLException e) {
            System.err.println("CartDAO.getProductById: " + e.getMessage());
        }
        return null;
    }

    /**
     * L·∫•y 1 item b·∫•t k·ª≥ trong gi·ªè h√†ng (d√πng khi test ho·∫∑c c·∫ßn preview)
     */
    public Cart getCartById(int customer_id) {
        String sql = "SELECT * FROM cart WHERE customer_id = ? LIMIT 1";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, customer_id);
            try (ResultSet rs = st.executeQuery()) {
                if (rs.next()) {
                    return new Cart(
                            rs.getInt("cart_id"),
                            rs.getInt("customer_id"),
                            rs.getInt("product_id"),
                            rs.getInt("quantity"),
                            rs.getFloat("price"),
                            rs.getString("size_name")
                    );
                }
            }
        } catch (SQLException e) {
            System.err.println("CartDAO.getCartById: " + e.getMessage());
        }
        return null;
    }

    /**
     * T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng = SUM(ƒë∆°n gi√° * s·ªë l∆∞·ª£ng)
     * 
     * @return t·ªïng ti·ªÅn (ƒë√£ l√†m tr√≤n v·ªÅ int)
     */
    public int getCartTotal(int customer_id) {
        String sql = "SELECT COALESCE(SUM(price * quantity), 0) AS total FROM cart WHERE customer_id = ?";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, customer_id);
            try (ResultSet rs = st.executeQuery()) {
                if (rs.next()) {
                    double total = rs.getDouble("total");
                    return (int) Math.round(total);
                }
            }
        } catch (SQLException e) {
            System.err.println("CartDAO.getCartTotal: " + e.getMessage());
        }
        return 0;
    }

    /**
     * ƒê·∫øm t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè (t√≠nh t·ªïng quantity)
     */
    public int getCartCount(int customer_id) {
        String sql = "SELECT COALESCE(SUM(quantity), 0) AS cnt FROM cart WHERE customer_id = ?";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, customer_id);
            try (ResultSet rs = st.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("cnt");
                }
            }
        } catch (SQLException e) {
            System.err.println("CartDAO.getCartCount: " + e.getMessage());
        }
        return 0;
    }

    /**
     * L·∫•y ƒë∆°n gi√° c·ªßa s·∫£n ph·∫©m trong gi·ªè theo (customer_id, product_id, size_name)
     * 
     * D√πng khi c·∫ßn ki·ªÉm tra ho·∫∑c hi·ªÉn th·ªã l·∫°i ƒë∆°n gi√° c≈© trong cart.jsp
     * 
     * @return ƒë∆°n gi√° (float)
     */
    public Float getUnitPriceInCart(int customerId, int productId, String sizeName) {
        String sql = "SELECT price FROM cart WHERE customer_id=? AND product_id=? AND size_name=? LIMIT 1";
        try (PreparedStatement st = connection.prepareStatement(sql)) {
            st.setInt(1, customerId);
            st.setInt(2, productId);
            st.setString(3, sizeName);
            try (ResultSet rs = st.executeQuery()) {
                if (rs.next()) {
                    return rs.getFloat("price");  // ƒê∆†N GI√Å
                }
            }
        } catch (SQLException e) {
            System.err.println("CartDAO.getUnitPriceInCart: " + e.getMessage());
        }
        return 0f;
    }
}
