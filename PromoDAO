/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package DAO;

import entity.Promo;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

/** CMT: DAO làm việc với bảng promo */
public class PromoDAO extends DBConnect.DBConnect {

    /** CMT: Lấy tất cả promo */
    public List<Promo> getAll() {
        List<Promo> list = new ArrayList<>();
        String sql = "SELECT * FROM promo";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                Promo p = new Promo(
                        rs.getInt("promo_id"),
                        rs.getInt("promo_percent"),
                        rs.getDate("start_date"),
                        rs.getDate("end_date"));
                list.add(p);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return list;
    }

    /** CMT: Thêm nếu chưa tồn tại theo percent (cú pháp SQL Server) */
    public boolean addIfNotExist(int percent) {
        String sql =
            "IF NOT EXISTS (SELECT 1 FROM promo WHERE promo_percent = ?)\n" +
            "BEGIN\n" +
            "  INSERT INTO promo (promo_percent, start_date, end_date)\n" +
            "  VALUES (?,'2024-02-26','2024-04-01')\n" +
            "END";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setInt(1, percent);
            st.setInt(2, percent);
            st.executeUpdate();
            return true;
        } catch (Exception e) {
            System.out.println(e);
        }
        return false;
    }

    /** CMT: Lấy promo_id theo phần trăm */
    public int getIdPromo(int percent) {
        String sql = "SELECT promo_id FROM promo WHERE promo_percent = ?";
        int id = 0;
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setInt(1, percent);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                id = rs.getInt("promo_id");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return id;
    }

    /** CMT: Thêm promo mới */
    public void addPromo(Promo p) {
        String sql = "INSERT INTO promo (promo_percent, start_date, end_date) VALUES (?, ?, ?)";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setInt(1, p.getPromoPercent());
            st.setDate(2, new java.sql.Date(p.getStartDate().getTime()));
            st.setDate(3, new java.sql.Date(p.getEndDate().getTime()));
            st.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /** CMT: Cập nhật promo theo ID */
    public void updatePromo(Promo p) {
        String sql = "UPDATE promo SET promo_percent = ?, start_date = ?, end_date = ? WHERE promo_id = ?";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setInt(1, p.getPromoPercent());
            st.setDate(2, new java.sql.Date(p.getStartDate().getTime()));
            st.setDate(3, new java.sql.Date(p.getEndDate().getTime()));
            st.setInt(4, p.getPromoID());
            st.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /** CMT: Xoá promo theo ID */
    public void deletePromo(int id) {
        String sql = "DELETE FROM promo WHERE promo_id = ?";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setInt(1, id);
            st.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /** CMT: Tìm kiếm theo phần trăm (CAST ... AS VARCHAR là SQL Server) */
    public List<Promo> searchPromo(String keyword) {
        List<Promo> list = new ArrayList<>();
        String sql = "SELECT * FROM promo WHERE CAST(promo_percent AS VARCHAR) LIKE ?";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setString(1, "%" + keyword + "%");
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                list.add(new Promo(
                        rs.getInt("promo_id"),
                        rs.getInt("promo_percent"),
                        rs.getDate("start_date"),
                        rs.getDate("end_date")
                ));
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return list;
    }

    /** CMT: Lấy promo theo ID (không kiểm tra hiệu lực) */
    public Promo getById(int id) {
        String sql = "SELECT promo_id, promo_percent, start_date, end_date FROM promo WHERE promo_id = ?";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setInt(1, id);
            ResultSet rs = st.executeQuery();
            if (rs.next()) {
                return new Promo(
                        rs.getInt("promo_id"),
                        rs.getInt("promo_percent"),
                        rs.getDate("start_date"),
                        rs.getDate("end_date")
                );
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return null;
    }

    /** CMT: Kiểm tra tồn tại theo ID */
    public boolean existsById(int id) {
        String sql = "SELECT 1 FROM promo WHERE promo_id = ?";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setInt(1, id);
            ResultSet rs = st.executeQuery();
            return rs.next();
        } catch (Exception e) {
            System.out.println(e);
        }
        return false;
    }

    /** CMT: Lấy phần trăm giảm theo ID */
    public Integer getPercentById(int id) {
        String sql = "SELECT promo_percent FROM promo WHERE promo_id = ?";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setInt(1, id);
            ResultSet rs = st.executeQuery();
            if (rs.next()) {
                return rs.getInt("promo_percent");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return null;
    }

    /** CMT: Lấy promo còn hiệu lực (SQL Server: GETDATE, CAST ... AS DATE) */
    public Promo getActiveById(int id) {
        String sql =
            "SELECT promo_id, promo_percent, start_date, end_date " +
            "FROM promo " +
            "WHERE promo_id = ? " +
            "  AND (start_date IS NULL OR CAST(GETDATE() AS DATE) >= CAST(start_date AS DATE)) " +
            "  AND (end_date   IS NULL OR CAST(GETDATE() AS DATE) <= CAST(end_date   AS DATE))";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setInt(1, id);
            ResultSet rs = st.executeQuery();
            if (rs.next()) {
                return new Promo(
                        rs.getInt("promo_id"),
                        rs.getInt("promo_percent"),
                        rs.getDate("start_date"),
                        rs.getDate("end_date")
                );
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return null;
    }
    
    // --- CUỐI FILE ---

    /** CMT: Lấy promo còn hiệu lực (PostgreSQL: CURRENT_DATE) */
    public Promo getActiveByIdDb(int id) {
        String sql =
            "SELECT promo_id, promo_percent, start_date, end_date " +
            "FROM public.promo " +
            "WHERE promo_id = ? " +
            "  AND (start_date IS NULL OR start_date <= CURRENT_DATE) " +
            "  AND (end_date   IS NULL OR end_date   >= CURRENT_DATE)";
        try {
            PreparedStatement st = connection.prepareStatement(sql);
            st.setInt(1, id);
            ResultSet rs = st.executeQuery();
            if (rs.next()) {
                return new Promo(
                    rs.getInt("promo_id"),
                    rs.getInt("promo_percent"),
                    rs.getDate("start_date"),
                    rs.getDate("end_date")
                );
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return null;
    }

    /** CMT: Debug URL kết nối DB hiện tại */
    public String debugUrl() {
        try {
            return (connection != null && !connection.isClosed())
                    ? connection.getMetaData().getURL()
                    : "connection is null/closed";
        } catch (Exception e) {
            return "debugUrl error: " + e.getMessage();
        }
    }
}
